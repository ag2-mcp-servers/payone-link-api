# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:19:25+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, conint, constr


class AddressDataDto(BaseModel):
    addressAddition: Optional[constr(min_length=1, max_length=50)] = Field(
        None, description='customer additional address line', examples=['7th floor']
    )
    city: Optional[
        constr(pattern=r'^[^\u0000\\!=<>?+;"*\d]+$', min_length=1, max_length=50)
    ] = Field(None, description='customer city', examples=['Kiel'])
    company: Optional[constr(min_length=2, max_length=50)] = Field(
        None, description='customer company name', examples=['PAYONE GmbH']
    )
    country: Optional[constr(pattern=r'[A-Z]{2}', min_length=2, max_length=2)] = Field(
        None,
        description='customer country code (2 letter ISO-3166 code)',
        examples=['DE'],
    )
    firstName: Optional[constr(min_length=1, max_length=50)] = Field(
        None, description='customer first name', examples=['John']
    )
    lastName: Optional[constr(min_length=2, max_length=50)] = Field(
        None, description='customer last name', examples=['Doe']
    )
    state: Optional[constr(pattern=r'[A-Z]{2}', min_length=2, max_length=2)] = Field(
        None, description='customer state code'
    )
    street: Optional[constr(min_length=2, max_length=50)] = Field(
        None, description='customer street name', examples=['Fraunhoferstr. 2-4']
    )
    zip: Optional[
        constr(pattern=r'[0-9A-Za-z_.\-/]{2,10}', min_length=2, max_length=10)
    ] = Field(None, description='customer postcode', examples=['24118'])


class Type(Enum):
    goods = 'goods'
    shipment = 'shipment'
    handling = 'handling'
    voucher = 'voucher'


class CartItemDto(BaseModel):
    deliveryDateEnd: Optional[date] = Field(
        None, description='delivery period end date', examples=['2021-01-01']
    )
    deliveryDateStart: Optional[date] = Field(
        None, description='delivery date', examples=['2021-01-01']
    )
    description: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='item description', examples=['Potatoes']
    )
    number: constr(
        pattern=r'[0-9A-Za-z(){} +\-_#/:\[\]]{1,32}', min_length=1, max_length=32
    ) = Field(..., description='item number', examples=['73883HFJ'])
    price: conint(ge=-1999999999, le=1999999999) = Field(
        ..., description='gross price of single item', examples=[1999]
    )
    quantity: conint(ge=1, le=999999) = Field(
        ..., description='total number of ordered items', examples=[1]
    )
    type: Type = Field(..., description='item type', examples=['goods'])
    vatRate: Optional[conint(ge=0, le=9999)] = Field(
        None, description='vat rate (<100 in %, >=100 in bp)', examples=[20]
    )


class InvoiceInformationDto(BaseModel):
    invoiceId: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description='id that should be put on the invoice'
    )
    invoiceText: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='short text that should be put after the invoice'
    )


class Currency(Enum):
    ALL = 'ALL'
    DZD = 'DZD'
    ARS = 'ARS'
    AUD = 'AUD'
    BSD = 'BSD'
    BHD = 'BHD'
    BDT = 'BDT'
    AMD = 'AMD'
    BBD = 'BBD'
    BMD = 'BMD'
    BTN = 'BTN'
    BOB = 'BOB'
    BWP = 'BWP'
    BZD = 'BZD'
    SBD = 'SBD'
    BND = 'BND'
    MMK = 'MMK'
    BIF = 'BIF'
    KHR = 'KHR'
    CAD = 'CAD'
    CVE = 'CVE'
    KYD = 'KYD'
    LKR = 'LKR'
    CLP = 'CLP'
    CNY = 'CNY'
    COP = 'COP'
    KMF = 'KMF'
    CRC = 'CRC'
    HRK = 'HRK'
    CUP = 'CUP'
    CZK = 'CZK'
    DKK = 'DKK'
    DOP = 'DOP'
    SVC = 'SVC'
    ETB = 'ETB'
    ERN = 'ERN'
    FKP = 'FKP'
    FJD = 'FJD'
    DJF = 'DJF'
    GMD = 'GMD'
    GIP = 'GIP'
    GTQ = 'GTQ'
    GNF = 'GNF'
    GYD = 'GYD'
    HTG = 'HTG'
    HNL = 'HNL'
    HKD = 'HKD'
    HUF = 'HUF'
    ISK = 'ISK'
    INR = 'INR'
    IDR = 'IDR'
    IRR = 'IRR'
    IQD = 'IQD'
    ILS = 'ILS'
    JMD = 'JMD'
    JPY = 'JPY'
    KZT = 'KZT'
    JOD = 'JOD'
    KES = 'KES'
    KPW = 'KPW'
    KRW = 'KRW'
    KWD = 'KWD'
    KGS = 'KGS'
    LAK = 'LAK'
    LBP = 'LBP'
    LSL = 'LSL'
    LRD = 'LRD'
    LYD = 'LYD'
    MOP = 'MOP'
    MWK = 'MWK'
    MYR = 'MYR'
    MVR = 'MVR'
    MUR = 'MUR'
    MXN = 'MXN'
    MNT = 'MNT'
    MDL = 'MDL'
    MAD = 'MAD'
    OMR = 'OMR'
    NAD = 'NAD'
    NPR = 'NPR'
    ANG = 'ANG'
    AWG = 'AWG'
    VUV = 'VUV'
    NZD = 'NZD'
    NIO = 'NIO'
    NGN = 'NGN'
    NOK = 'NOK'
    PKR = 'PKR'
    PAB = 'PAB'
    PGK = 'PGK'
    PYG = 'PYG'
    PEN = 'PEN'
    PHP = 'PHP'
    QAR = 'QAR'
    RUB = 'RUB'
    RWF = 'RWF'
    SHP = 'SHP'
    SAR = 'SAR'
    SCR = 'SCR'
    SLL = 'SLL'
    SGD = 'SGD'
    VND = 'VND'
    SOS = 'SOS'
    ZAR = 'ZAR'
    SSP = 'SSP'
    SZL = 'SZL'
    SEK = 'SEK'
    CHF = 'CHF'
    SYP = 'SYP'
    THB = 'THB'
    TOP = 'TOP'
    TTD = 'TTD'
    AED = 'AED'
    TND = 'TND'
    UGX = 'UGX'
    MKD = 'MKD'
    EGP = 'EGP'
    GBP = 'GBP'
    TZS = 'TZS'
    USD = 'USD'
    UYU = 'UYU'
    UZS = 'UZS'
    WST = 'WST'
    YER = 'YER'
    TWD = 'TWD'
    UYW = 'UYW'
    VES = 'VES'
    MRU = 'MRU'
    STN = 'STN'
    CUC = 'CUC'
    ZWL = 'ZWL'
    BYN = 'BYN'
    TMT = 'TMT'
    GHS = 'GHS'
    SDG = 'SDG'
    UYI = 'UYI'
    RSD = 'RSD'
    MZN = 'MZN'
    AZN = 'AZN'
    RON = 'RON'
    CHE = 'CHE'
    CHW = 'CHW'
    TRY = 'TRY'
    XAF = 'XAF'
    XCD = 'XCD'
    XOF = 'XOF'
    XPF = 'XPF'
    XBA = 'XBA'
    XBB = 'XBB'
    XBC = 'XBC'
    XBD = 'XBD'
    XAU = 'XAU'
    XDR = 'XDR'
    XAG = 'XAG'
    XPT = 'XPT'
    XTS = 'XTS'
    XPD = 'XPD'
    XUA = 'XUA'
    ZMW = 'ZMW'
    SRD = 'SRD'
    MGA = 'MGA'
    COU = 'COU'
    AFN = 'AFN'
    TJS = 'TJS'
    AOA = 'AOA'
    BGN = 'BGN'
    CDF = 'CDF'
    BAM = 'BAM'
    EUR = 'EUR'
    MXV = 'MXV'
    UAH = 'UAH'
    GEL = 'GEL'
    BOV = 'BOV'
    PLN = 'PLN'
    BRL = 'BRL'
    CLF = 'CLF'
    XSU = 'XSU'
    USN = 'USN'


class Intent(Enum):
    authorization = 'authorization'
    preauthorization = 'preauthorization'


class Language(Enum):
    de_DE = 'de_DE'
    en_US = 'en_US'


class Mode(Enum):
    live = 'live'
    test = 'test'


class PaymentMethod(Enum):
    visa = 'visa'
    mastercard = 'mastercard'
    amex = 'amex'
    paypal = 'paypal'
    sofort = 'sofort'
    paydirekt = 'paydirekt'
    postfinance_e = 'postfinance-e'
    postfinance_card = 'postfinance-card'
    bancontact = 'bancontact'
    przelewy24 = 'przelewy24'
    alipay = 'alipay'
    ideal = 'ideal'
    eps = 'eps'
    giropay = 'giropay'
    sepa = 'sepa'


class LinkCreateRequest(BaseModel):
    accountId: constr(pattern=r'[0-9]+') = Field(
        ..., description='identifier for the subaccount', examples=['12345']
    )
    active: Optional[bool] = Field(
        True, description='link activation status', examples=[True]
    )
    backgroundImage: Optional[str] = Field(
        None,
        description='backgroundImage css property',
        examples=['linear-gradient(to bottom right, #ffffff, #3295d6)'],
    )
    billing: Optional[AddressDataDto] = None
    currency: Currency = Field(..., description='currency code', examples=['EUR'])
    description: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='free format description of the payment',
        examples=['This payment is awesome!!'],
    )
    email: Optional[constr(min_length=4, max_length=254)] = Field(
        None, description='email the invoice should be delivered to'
    )
    errorUrl: Optional[str] = Field(
        None, description='final redirect after a final payment'
    )
    expiration: Optional[date] = Field(
        None,
        description='link expiration date, the link will only be executable until end of that day',
        examples=['2020-02-20'],
    )
    intent: Optional[Intent] = Field(
        'authorization',
        description='designates the type of transaction that will be created',
    )
    invoiceInformation: Optional[InvoiceInformationDto] = None
    language: Optional[Language] = Field(
        None, description='link ISO language code', examples=['en_US']
    )
    logo: Optional[str] = Field(
        None,
        description='logo url',
        examples=[
            'https://www.payone.com/wp-content/uploads/2018/12/Payone-Logo-2020.jpg'
        ],
    )
    merchantId: constr(pattern=r'[0-9]+') = Field(
        ..., description='identifier for the merchant', examples=['12345']
    )
    mode: Mode = Field(..., description='execution mode', examples=['live'])
    notifyUrl: Optional[str] = Field(
        None,
        description='Url where the notification will be send after link was executed',
    )
    paymentMethods: Optional[List[PaymentMethod]] = Field(
        None,
        description='list of available payment methods',
        examples=[['visa', 'mastercard']],
    )
    portalId: constr(pattern=r'[0-9]+') = Field(
        ..., description='identifier for the portal', examples=['1234567']
    )
    reference: constr(pattern=r'[0-9a-zA-Z.\\-_/]{1,20}') = Field(
        ...,
        description='payment reference number, has to be unique per merchant and mode',
        examples=['payment_1'],
    )
    shipping: Optional[AddressDataDto] = None
    shoppingCart: List[CartItemDto] = Field(..., max_length=400, min_length=1)
    successUrl: Optional[str] = Field(
        None, description='final redirect after a successful payment'
    )
    userId: Optional[constr(pattern=r'[0-9]+')] = Field(
        None, description='identifier for the user', examples=['12345678']
    )


class Status(Enum):
    ready = 'ready'
    created = 'created'
    executed = 'executed'
    expired = 'expired'
    deactivated = 'deactivated'


class LinkResponse(BaseModel):
    accountId: Optional[str] = Field(
        None, description='identifier for the subaccount', examples=['12345']
    )
    active: Optional[bool] = Field(
        True, description='link activation status', examples=[True]
    )
    amount: Optional[conint(ge=1, le=1999999999)] = Field(
        None,
        description='total amount of all shopping cart items in lowest denomination',
        examples=[799],
    )
    backgroundImage: Optional[str] = Field(
        None,
        description='backgroundImage css property',
        examples=['linear-gradient(to bottom right, #ffffff, #3295d6)'],
    )
    billing: Optional[AddressDataDto] = None
    created: Optional[int] = Field(None, description='created time in ISO 8601 format')
    currency: Optional[Currency] = Field(
        None, description='currency code', examples=['EUR']
    )
    description: Optional[constr(max_length=255)] = Field(
        None,
        description='free format description of the payment',
        examples=['This payment is awesome!!'],
    )
    email: Optional[constr(min_length=4, max_length=254)] = Field(
        None, description='customer email for invoices or payment notification'
    )
    errorUrl: Optional[str] = Field(
        None, description='final redirect after a failed payment'
    )
    expiration: Optional[date] = Field(
        None,
        description='link expiration date, the link will only be executable until end of that day',
        examples=['2020-02-20'],
    )
    hash: Optional[str] = Field(
        None,
        description='hash for the client API',
        examples=['a42847abb8bfca62876ca64c0fa981f8'],
    )
    id: Optional[constr(min_length=32, max_length=32)] = Field(
        None, description='link id', examples=['HUENJ5FY124QHUENJ5FY124QHUENJ5FY']
    )
    intent: Optional[Intent] = Field(
        'authorization',
        description='designates the type of transaction that will be created',
    )
    invoiceInformation: Optional[InvoiceInformationDto] = None
    language: Optional[Language] = Field(
        None, description='link ISO language code', examples=['en_US']
    )
    link: Optional[str] = Field(None, description='customer payment link')
    logo: Optional[str] = Field(
        None,
        description='logo url',
        examples=[
            'https://www.payone.com/wp-content/uploads/2018/12/Payone-Logo-2020.jpg'
        ],
    )
    merchantId: Optional[str] = Field(
        None, description='identifier for the merchant', examples=['12345']
    )
    mode: Optional[Mode] = Field(None, description='execution mode', examples=['live'])
    modified: Optional[int] = Field(
        None, description='last modified time in ISO 8601 format'
    )
    notifyUrl: Optional[str] = Field(
        None, description='notify url. If unset no notification will be send'
    )
    paymentMethod: Optional[PaymentMethod] = Field(
        None, description='available payment methods', examples=['visa']
    )
    paymentMethods: Optional[List[PaymentMethod]] = Field(
        None,
        description='list of available payment methods',
        examples=[['visa', 'mastercard']],
    )
    paymentProcess: Optional[str] = Field(
        None,
        description='identifier of the created payment process.',
        examples=['347867997'],
    )
    portalId: Optional[str] = Field(
        None, description='identifier for the portal', examples=['1234567']
    )
    redirectUrl: Optional[str] = Field(
        None,
        description='redirect url. empty if the payment process does not require a redirect.',
    )
    reference: Optional[constr(min_length=1, max_length=20)] = Field(
        None,
        description='payment reference number, has to be unique per merchant and mode',
        examples=['payment_1'],
    )
    shipping: Optional[AddressDataDto] = None
    shoppingCart: Optional[List[CartItemDto]] = None
    status: Optional[Status] = Field(
        None, description='link status', examples=['ready']
    )
    successUrl: Optional[str] = Field(
        None, description='final redirect after a successful payment'
    )
    userId: Optional[str] = Field(
        None, description='identifier of the created user.', examples=['356845874']
    )


class Sort(BaseModel):
    empty: Optional[bool] = None
    sorted: Optional[bool] = None
    unsorted: Optional[bool] = None


class Pageable(BaseModel):
    offset: Optional[int] = None
    pageNumber: Optional[int] = None
    pageSize: Optional[int] = None
    paged: Optional[bool] = None
    sort: Optional[Sort] = None
    unpaged: Optional[bool] = None


class PageLinkResponse(BaseModel):
    content: Optional[List[LinkResponse]] = None
    empty: Optional[bool] = None
    first: Optional[bool] = None
    last: Optional[bool] = None
    number: Optional[int] = None
    numberOfElements: Optional[int] = None
    pageable: Optional[Pageable] = None
    size: Optional[int] = None
    sort: Optional[Sort] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
